"use strict";(self.webpackChunkatlas_site=self.webpackChunkatlas_site||[]).push([[1844],{2176:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>c,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"pocket/pocket_geopandas_hatches","title":"Hatches en GeoPandas","description":"Prop\xf3sito","source":"@site/docs/pocket/geopandas_hatches.md","sourceDirName":"pocket","slug":"/pocket/geopandas_hatches","permalink":"/docs/pocket/geopandas_hatches","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/pocket/geopandas_hatches.md","tags":[{"inline":true,"label":"geopandas","permalink":"/docs/tags/geopandas"},{"inline":true,"label":"matplotlib","permalink":"/docs/tags/matplotlib"},{"inline":true,"label":"hatch","permalink":"/docs/tags/hatch"},{"inline":true,"label":"leyenda","permalink":"/docs/tags/leyenda"},{"inline":true,"label":"transparencia","permalink":"/docs/tags/transparencia"}],"version":"current","frontMatter":{"id":"pocket_geopandas_hatches","title":"Hatches en GeoPandas","slug":"/pocket/geopandas_hatches","module":"apendice-pocket","version":"0.1.0","status":"draft","owners":["atlas-core"],"tags":["geopandas","matplotlib","hatch","leyenda","transparencia"],"source_repo":"<repo-url>","source_path":"docs/pocket/geopandas_hatches.md"},"sidebar":"tutorialSidebar","previous":{"title":"GeoPandas plot \u2014 pre-checks","permalink":"/docs/pocket/geo_plot_prechecks"},"next":{"title":"GeoPandas plot \u2014 pre-checks","permalink":"/docs/pocket/geo_plot_prechecks"}}');var s=n(4848),t=n(8453);const c={id:"pocket_geopandas_hatches",title:"Hatches en GeoPandas",slug:"/pocket/geopandas_hatches",module:"apendice-pocket",version:"0.1.0",status:"draft",owners:["atlas-core"],tags:["geopandas","matplotlib","hatch","leyenda","transparencia"],source_repo:"<repo-url>",source_path:"docs/pocket/geopandas_hatches.md"},r=void 0,l={},d=[{value:"Prop\xf3sito",id:"prop\xf3sito",level:2},{value:"Densidad y leyenda",id:"densidad-y-leyenda",level:2},{value:"Notas operativas",id:"notas-operativas",level:3}];function i(e){const a={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h2,{id:"prop\xf3sito",children:"Prop\xf3sito"}),"\n",(0,s.jsxs)(a.p,{children:["Patrones de ",(0,s.jsx)(a.strong,{children:"hatch"})," en mapas (p. ej., ",(0,s.jsx)(a.code,{children:"'/'"}),", ",(0,s.jsx)(a.code,{children:"'//'"}),", ",(0,s.jsx)(a.code,{children:"'///'"}),"), con ",(0,s.jsx)(a.strong,{children:"leyendas correctas"})," y ",(0,s.jsx)(a.strong,{children:"overlay"})," para controlar colores/alpha."]}),"\n",(0,s.jsx)(a.h2,{id:"densidad-y-leyenda",children:"Densidad y leyenda"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-python",children:'import matplotlib.patches as mpatches\n\nbase_colors = {\n  "capas_A": ("lightblue",  "///"),\n  "capas_B": ("lightcoral", "\\\\\\\\\\\\"),\n  "capas_C": ("lightgreen", "|||"),\n}\n\nlegend_items = []\nfor name, (color, hatch) in base_colors.items():\n    sel = merged.loc[merged[f"{name}_flag"] > 0]\n    # 1) trazar hatch (sin cara) con borde del color\n    sel.plot(ax=ax, color=\'none\', edgecolor=color, hatch=hatch)\n    legend_items.append(mpatches.Patch(facecolor=color, hatch=hatch, label=name, edgecolor=color))\n\n# 2) overlay de color (sin hatch) con alpha para dejar ver las rayas\nfor name, (color, _) in base_colors.items():\n    sel = merged.loc[merged[f"{name}_flag"] > 0]\n    sel.plot(ax=ax, color=color, edgecolor=\'none\', alpha=0.4)\n\nax.legend(handles=legend_items, loc=\'upper left\')\n'})}),"\n",(0,s.jsx)(a.h3,{id:"notas-operativas",children:"Notas operativas"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["La ",(0,s.jsx)(a.strong,{children:"leyenda"})," requiere ",(0,s.jsx)(a.code,{children:"Patch"})," (no ",(0,s.jsx)(a.code,{children:"Line2D"}),") para mostrar el hatch."]}),"\n",(0,s.jsxs)(a.li,{children:["Si quer\xe9s ",(0,s.jsx)(a.strong,{children:"rayas y relleno"})," con colores distintos, el ",(0,s.jsx)(a.strong,{children:"doble plot"})," (arriba) es la v\xeda pr\xe1ctica."]}),"\n",(0,s.jsxs)(a.li,{children:["Ajust\xe1 densidad con ",(0,s.jsx)(a.code,{children:"'/'"})," \u2192 ",(0,s.jsx)(a.code,{children:"'//'"})," \u2192 ",(0,s.jsx)(a.code,{children:"'///'"})," seg\xfan visibilidad y solapes."]}),"\n"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{children:"(Trucos: densidad `'/' '//' '///'`, leyendas con `Patch`, y overlay con alpha para que el hatch sea visible). \x3c!-- removed contentReference --\x3e\n\n"})})]})}function p(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>c,x:()=>r});var o=n(6540);const s={},t=o.createContext(s);function c(e){const a=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(t.Provider,{value:a},e.children)}}}]);