"use strict";(self.webpackChunkatlas_site=self.webpackChunkatlas_site||[]).push([[1104],{8213:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"pocket/pocket_json_deep_merge_qseries","title":"merge_jsons (series Q)","description":"Prop\xf3sito","source":"@site/docs/pocket/json_deep_merge_qseries.md","sourceDirName":"pocket","slug":"/pocket/json_deep_merge_qseries","permalink":"/atlas-site/docs/pocket/json_deep_merge_qseries","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/pocket/json_deep_merge_qseries.md","tags":[{"inline":true,"label":"json","permalink":"/atlas-site/docs/tags/json"},{"inline":true,"label":"merge","permalink":"/atlas-site/docs/tags/merge"},{"inline":true,"label":"timeseries","permalink":"/atlas-site/docs/tags/timeseries"},{"inline":true,"label":"quarterly","permalink":"/atlas-site/docs/tags/quarterly"},{"inline":true,"label":"metadata","permalink":"/atlas-site/docs/tags/metadata"}],"version":"current","frontMatter":{"id":"pocket_json_deep_merge_qseries","title":"merge_jsons (series Q)","slug":"/pocket/json_deep_merge_qseries","module":"apendice-pocket","version":"0.1.0","status":"draft","owners":["atlas-core"],"tags":["json","merge","timeseries","quarterly","metadata"],"source_repo":"<repo-url>","source_path":"docs/pocket/json_deep_merge_qseries.md"},"sidebar":"tutorialSidebar","previous":{"title":"Time series interactivos (JS)","permalink":"/atlas-site/docs/pocket/interactive_ts_js"},"next":{"title":"JSON \u2014 quick-ref Python","permalink":"/atlas-site/docs/pocket/json_quickref"}}');var a=r(4848),t=r(8453);const i={id:"pocket_json_deep_merge_qseries",title:"merge_jsons (series Q)",slug:"/pocket/json_deep_merge_qseries",module:"apendice-pocket",version:"0.1.0",status:"draft",owners:["atlas-core"],tags:["json","merge","timeseries","quarterly","metadata"],source_repo:"<repo-url>",source_path:"docs/pocket/json_deep_merge_qseries.md"},o=void 0,l={},d=[{value:"Prop\xf3sito",id:"prop\xf3sito",level:2},{value:"Estructura objetivo (esquema mental)",id:"estructura-objetivo-esquema-mental",level:2},{value:"Implementaci\xf3n recomendada",id:"implementaci\xf3n-recomendada",level:2},{value:"Pol\xedtica de no-overwrite",id:"pol\xedtica-de-no-overwrite",level:2},{value:"QA m\xednimo",id:"qa-m\xednimo",level:2},{value:"Errores comunes y c\xf3mo evitarlos",id:"errores-comunes-y-c\xf3mo-evitarlos",level:2},{value:"Relacionados",id:"relacionados",level:2}];function c(e){const s={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.h2,{id:"prop\xf3sito",children:"Prop\xf3sito"}),"\n",(0,a.jsxs)(s.p,{children:["Fusi\xf3n ",(0,a.jsx)(s.strong,{children:"jer\xe1rquica"})," de estructuras JSON (observable \u2192 sint\xe9tico \u2192 ",(0,a.jsx)(s.code,{children:"data"})," por agrupador \u2192 ",(0,a.jsx)(s.strong,{children:"Q"}),"), ",(0,a.jsx)(s.strong,{children:"sin perder hist\xf3ricos"})," y actualizando solo lo nuevo. Evita el overwrite por ",(0,a.jsx)(s.code,{children:".update()"})," plano. "]}),"\n",(0,a.jsx)(s.h2,{id:"estructura-objetivo-esquema-mental",children:"Estructura objetivo (esquema mental)"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-text",children:'{\n  <observable>: {\n    <sintetico>: {\n      "metadata": {"last_updated": "...", ...},\n      "data": {\n        <grouper_value>: {\n          "2019Q4": <valor>,\n          "2020Q1": <valor>,\n          ...\n        },\n        ...\n      }\n    },\n    ...\n  },\n  ...\n}\n'})}),"\n",(0,a.jsxs)(s.p,{children:["La fusi\xf3n correcta ",(0,a.jsx)(s.strong,{children:"agrega/actualiza"})," por clave ",(0,a.jsx)(s.code,{children:"Q"})," ",(0,a.jsx)(s.strong,{children:"sin borrar"})," trimestres previos y refresca ",(0,a.jsx)(s.code,{children:"metadata.last_updated"}),". "]}),"\n",(0,a.jsx)(s.h2,{id:"implementaci\xf3n-recomendada",children:"Implementaci\xf3n recomendada"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-python",children:'def merge_jsons(main_data: dict, new_data: dict) -> dict:\n    """\n    Funde estructuras jer\xe1rquicas sin perder hist\xf3ricos trimestrales.\n    Niveles: observable -> sintetico -> data[grouper][Q] = valor\n    - Actualiza \'metadata.last_updated\' con el del bloque nuevo.\n    - No hace overwrite masivo: actualiza Q puntuales.\n    """\n    for observable, metrics in new_data.items():\n        if observable not in main_data:\n            main_data[observable] = {}\n\n        for sintetico, details in metrics.items():\n            # Inicializar nodo si no existe\n            if sintetico not in main_data[observable]:\n                main_data[observable][sintetico] = {\n                    "metadata": details.get("metadata", {}),\n                    "data": {}\n                }\n            else:\n                # Refrescar solo el last_updated (o mergear metadata si aplica)\n                if "metadata" in details and "last_updated" in details["metadata"]:\n                    main_data[observable][sintetico]["metadata"]["last_updated"] = \\\n                        details["metadata"]["last_updated"]\n\n            # Merge fino por agrupador y Q\n            for grp_val, ts in details.get("data", {}).items():\n                main_node = main_data[observable][sintetico]["data"].setdefault(grp_val, {})\n                # ts es dict de Q->valor: actualizar uno a uno\n                for q, v in ts.items():\n                    main_node[q] = v\n    return main_data\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Este patr\xf3n condensa tus iteraciones jer\xe1rquicas previas y corrige el ",(0,a.jsx)(s.strong,{children:"overwrite de series"})," que generaba p\xe9rdida de Qs. "]}),"\n",(0,a.jsx)(s.h2,{id:"pol\xedtica-de-no-overwrite",children:"Pol\xedtica de no-overwrite"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Regla"}),": escribir por ",(0,a.jsx)(s.strong,{children:"Q"})," concreta; nunca reemplazar ",(0,a.jsx)(s.code,{children:"data[grp_val]"})," entero."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Metadata"}),": refrescar ",(0,a.jsx)(s.strong,{children:"solo"})," ",(0,a.jsx)(s.code,{children:"last_updated"})," (o merge selectivo). "]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"qa-m\xednimo",children:"QA m\xednimo"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["Antes/despu\xe9s: contar Qs \xfanicos por ",(0,a.jsx)(s.code,{children:"grp_val"}),"."]}),"\n",(0,a.jsxs)(s.li,{children:["Idempotencia: aplicar dos veces ",(0,a.jsx)(s.code,{children:"merge_jsons(main, new)"})," no cambia el resultado."]}),"\n",(0,a.jsxs)(s.li,{children:["Verboz: opcionalmente loguear altas/updates por (",(0,a.jsx)(s.code,{children:"observable"}),", ",(0,a.jsx)(s.code,{children:"sintetico"}),", ",(0,a.jsx)(s.code,{children:"grp_val"}),", ",(0,a.jsx)(s.code,{children:"Q"}),"). "]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"errores-comunes-y-c\xf3mo-evitarlos",children:"Errores comunes y c\xf3mo evitarlos"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsxs)(s.strong,{children:[(0,a.jsx)(s.code,{children:".update()"})," al nivel equivocado"]})," \u2192 pisa el dict completo de Qs. Soluci\xf3n: loop granular por Q. "]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Introducir listas de dicts para series"})," \u2192 complica dedupe. Prefer\xed ",(0,a.jsx)(s.code,{children:"dict"})," ",(0,a.jsx)(s.code,{children:"{Q: valor}"}),". "]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"No inicializar nodos intermedios"})," \u2192 ",(0,a.jsx)(s.code,{children:"KeyError"}),". Usar ",(0,a.jsx)(s.code,{children:"setdefault"}),"/",(0,a.jsx)(s.code,{children:"get"}),"."]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"relacionados",children:"Relacionados"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"/metodos/etl_json_policies"})," (serializaci\xf3n, compresi\xf3n y contratos)."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Pocket \u2192 logging & QA de merges"})," para checks de filas y diffs."]}),"\n"]})]})}function u(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>i,x:()=>o});var n=r(6540);const a={},t=n.createContext(a);function i(e){const s=n.useContext(t);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);